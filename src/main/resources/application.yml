spring:
  application:
    name: ty-multiverse-gateway
  profiles:
    active: '@env@'
  cloud:
    gateway:
      # Global CORS configuration
      globalcors:
        cors-configurations:
          "[/**]":
            allowedOrigins:
              - '@PUBLIC_FRONTEND_URL@'
              - "http://localhost:4321"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
              - PATCH
            allowedHeaders:
              - "*"
            allowCredentials: true
            maxAge: 3600

      # Route configurations - 將所有請求轉發到 backend
      # 前端請求格式：http://localhost:8082/tymg/**
      # Gateway 轉發到：http://localhost:8080/tymb/**
      routes:
        # Health check route - 測試基本路由功能
        - id: health-route
          uri: '@BACKEND_SERVICE_URL@'
          predicates:
            - Path=/tymg/health/**
          filters:
            - StripPrefix=1
        # People module routes (gRPC mode) - 路由到 Gateway 內部控制器
        - id: people-route
          uri: '@BACKEND_SERVICE_URL@' # 指向 backend 服務
          predicates:
            - Path=/tymg/people/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # People Images routes (gRPC mode) - 路由到 Gateway 內部控制器
        - id: people-images-route
          uri: '@BACKEND_SERVICE_URL@' # 指向 backend 服務
          predicates:
            - Path=/tymg/people-images/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # Weapons routes handled by WeaponController (gRPC mode)
        - id: weapons-route
          uri: '@BACKEND_SERVICE_URL@' # 指向 backend 服務
          predicates:
            - Path=/tymg/weapons/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # Gallery routes handled by GalleryController (gRPC mode)
        - id: gallery-route
          uri: '@BACKEND_SERVICE_URL@' # 指向 backend 服務
          predicates:
            - Path=/tymg/gallery/**
            - Method=GET,POST,PUT,DELETE
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # CKEditor routes (gRPC mode) - 路由到 Gateway 內部控制器
        - id: ckeditor-route
          uri: '@BACKEND_SERVICE_URL@' # 指向 backend 服務
          predicates:
            - Path=/tymg/ckeditor/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴


        # Auth routes removed - authentication goes directly to backend

        # Deckofcards routes (gRPC mode) - 路由到 Gateway 內部控制器
        - id: deckofcards-route
          uri: '@BACKEND_SERVICE_URL@' # 指向 backend 服務
          predicates:
            - Path=/tymg/deckofcards/blackjack/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # Async API routes
        - id: async-request-status-route
          uri: '@BACKEND_SERVICE_URL@'
          predicates:
            - Path=/tymg/api/request-status/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        - id: async-test-route
          uri: '@BACKEND_SERVICE_URL@'
          predicates:
            - Path=/tymg/api/test/async/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # Auth routes
        - id: auth-route
          uri: '@BACKEND_SERVICE_URL@'
          predicates:
            - Path=/tymg/auth/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # JavaDoc routes
        - id: docs-route
          uri: '@BACKEND_SERVICE_URL@'
          predicates:
            - Path=/tymg/docs/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # Actuator routes
        - id: actuator-route
          uri: '@BACKEND_SERVICE_URL@'
          predicates:
            - Path=/tymg/actuator/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

        # Swagger/OpenAPI routes
        - id: swagger-route
          uri: '@BACKEND_SERVICE_URL@'
          predicates:
            - Path=/tymg/swagger-ui/**,/tymg/v3/api-docs/**
          filters:
            - StripPrefix=1 # 移除 /tymg 前綴

      # Default filters applied to all routes
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddResponseHeader=X-Gateway-Response, TYM-Gateway

  # Redis configuration for rate limiting (currently disabled)
  # data:
  #   redis:
  #     host: '@REDIS_HOST@'
  #     port: '@REDIS_CUSTOM_PORT@'
  #     password: '@REDIS_PASSWORD@'
  #     database: 1  # Use different database from backend
  #     timeout: 5000ms
  #     lettuce:
  #       pool:
  #         max-active: 8
  #         max-idle: 8
  #         min-idle: 2
  #         max-wait: 5000ms

# Server configuration
server:
  port: 8082
  # Note: Gateway uses WebFlux, not Servlet. Context path is handled via route predicates.

# Circuit Breaker Configuration (disabled for now)
# resilience4j:
#   circuitbreaker:
#     configs:
#       default:
#         slidingWindowSize: 100
#         minimumNumberOfCalls: 10
#         permittedNumberOfCallsInHalfOpenState: 3
#         automaticTransitionFromOpenToHalfOpenEnabled: true
#         waitDurationInOpenState: 10s
#         failureRateThreshold: 50
#         eventConsumerBufferSize: 10
#     instances:
#       backendCircuitBreaker:
#         baseConfig: default

#   timelimiter:
#     configs:
#       default:
#         timeoutDuration: 30s

# Actuator configuration
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus,gateway
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
    gateway:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true

# Logging configuration
logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: INFO
    org.springframework.web: INFO
    reactor.netty: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Application specific properties
url:
  frontend: '@PUBLIC_FRONTEND_URL@/tymultiverse'

# gRPC Client Configuration
grpc:
  client:
    enabled: ${GRPC_CLIENT_ENABLED:false}
    backend:
      host: ${GRPC_BACKEND_HOST:localhost}
      port: ${GRPC_BACKEND_PORT:50051}
